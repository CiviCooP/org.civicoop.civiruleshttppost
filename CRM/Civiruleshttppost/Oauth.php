<?php

class CRM_Civiruleshttppost_Oauth {

  protected $consumer_key;

  protected $consumer_secret;

  protected $access_token;

  protected $access_token_secret;

  public function __construct($consumer_key, $consumer_secret, $access_token, $access_token_secret) {
    $this->consumer_key = $consumer_key;
    $this->consumer_secret = $consumer_secret;
    $this->access_token = $access_token;
    $this->access_token_secret = $access_token_secret;
  }

  public function signRequest(\Httpful\Request $request) {
    $url = $request->uri;

    $consumer_key              = $this->consumer_key;
    $consumer_secret           = $this->consumer_secret;
    $oauth_access_token        = $this->access_token;
    $oauth_access_token_secret = $this->access_token_secret;

    $oauth = array(
      'oauth_consumer_key' => $consumer_key,
      'oauth_nonce' => hash('sha512', $this->makeRandomString()),
      'oauth_signature_method' => 'HMAC-SHA1',
      'oauth_token' => $oauth_access_token,
      'oauth_timestamp' => time(),
      'oauth_version' => '1.0'
    );

    list($uri, $getfield) = explode('?', $url);
    if (!is_null($getfield))
    {
      $getfields = str_replace('?', '', explode('&', $getfield));
      foreach ($getfields as $g)
      {
        $split = explode('=', $g);
        /** In case a null is passed through **/
        if (isset($split[1]))
        {
          $oauth[$split[0]] = urldecode($split[1]);
        }
      }
    }

    $postfields = $request->payload;
    if (!is_null($postfields)) {
      $postfields = explode('&', $postfields);
      foreach ($postfields as $g)
      {
        $split = explode('=', $g);
        /** In case a null is passed through **/
        if (isset($split[1]))
        {
          $oauth[$split[0]] = urldecode($split[1]);
        }
      }
    }

    $base_info = $this->buildBaseString($url, strtoupper($request->method), $oauth);
    $composite_key = rawurlencode($consumer_secret) . '&' . rawurlencode($oauth_access_token_secret);
    $oauth_signature = base64_encode(hash_hmac('sha1', $base_info, $composite_key, true));
    $oauth['oauth_signature'] = $oauth_signature;
    $authorisationHeader =  $this->buildAuthorizationHeader($oauth);

    $request->addHeader('Authorization', $authorisationHeader);
    return $request;
  }

  /**
   * Private method to generate the base string used by cURL
   *
   * @param string $baseURI
   * @param string $method
   * @param array  $params
   *
   * @return string Built base string
   */
  private function buildBaseString($baseURI, $method, $params)
  {
    $return = array();
    ksort($params);
    foreach($params as $key => $value)
    {
      $return[] = rawurlencode($key) . '=' . rawurlencode($value);
    }
    return $method . "&" . rawurlencode($baseURI) . '&' . rawurlencode(implode('&', $return));
  }

  /**
   * Private method to generate authorization header used by cURL
   *
   * @param array $oauth Array of oauth data generated by buildOauth()
   *
   * @return string $return Header used by cURL for request
   */
  private function buildAuthorizationHeader(array $oauth)
  {
    $return = 'OAuth ';
    $values = array();
    $keys = array('oauth_consumer_key', 'oauth_nonce', 'oauth_signature', 'oauth_signature_method', 'oauth_timestamp', 'oauth_token', 'oauth_version');
    foreach($keys as $key) {
      if (isset($oauth[$key])) {
        $values[] = "$key=\"".rawurlencode($oauth[$key])."\"";
      }
    }

    $return .= implode(', ', $values);
    return $return;
  }

  private function makeRandomString($bits = 256) {
    $bytes = ceil($bits / 8);
    $return = '';
    for ($i = 0; $i < $bytes; $i++) {
      $return .= chr(mt_rand(0, 255));
    }
    return $return;
  }

}